// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Sloop {
  id            String       @id @default(cuid())
  name          String       @db.Text
  description   String       @db.Text
  trackId       String
  track         Track        @relation(fields: [trackId], references: [id], onDelete: Cascade)
  artists       Artist[]
  duration      Float
  key           Int
  mode          Int
  tempo         Float
  timeSignature Int
  loops         Json
  isPrivate     Boolean      @default(true)
  userId        String
  userUsername  String       @db.VarChar(255)
  user          User         @relation(fields: [userId, userUsername], references: [id, username], onDelete: Cascade)
  likes         Like[]
  plays         Play[]
  rankedSloop   RankedSloop?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([userId])
  @@index([trackId])
  @@index([userUsername])
  @@index([userId, userUsername])
  @@fulltext([name])
  @@fulltext([description])
  @@fulltext([userUsername], map: "userUsername-fulltext")
  @@fulltext([name, description, userUsername])
}

model Track {
  id           String        @id
  name         String        @db.Text
  image        String?       @db.Text
  sloops       Sloop[]
  artists      Artist[]
  createdAt    DateTime      @default(now())

  @@fulltext([name])
}

model Artist {
  id           String        @id
  name         String        @db.Text
  image        String?       @db.Text
  sloops       Sloop[]
  tracks       Track[]
  rankedArtist RankedArtist?
  createdAt    DateTime      @default(now())

  @@fulltext([name])
}

model Play {
  id        String      @id @default(cuid())
  sloopId   String
  userId    String 
  count     Int      @default(0)
  sloop     Sloop    @relation(fields: [sloopId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sloopId, userId])
  @@index([sloopId])
  @@index([userId])
}

model Like {
  id        String      @id @default(cuid())
  sloopId   String
  userId    String
  sloop     Sloop    @relation(fields: [sloopId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([sloopId, userId])
  @@index([sloopId])
  @@index([userId])
}

model SloopPlayCount {
  id        String      @id @default(cuid())
  sloopId   String
  sloop     RankedSloop @relation(fields: [sloopId], references: [sloopId], onDelete: Cascade)
  playCount Int
  createdAt DateTime    @default(now())

  @@index([sloopId])
  @@index([playCount])
}

model SloopRank {
  id        String      @id @default(cuid())
  sloopId   String
  sloop     RankedSloop @relation(fields: [sloopId], references: [sloopId], onDelete: Cascade)
  rank      Float
  createdAt DateTime    @default(now())

  @@index([sloopId])
  @@index([rank])
}

model SloopLikeCount {
  id        String      @id @default(cuid())
  sloopId   String
  sloop     RankedSloop @relation(fields: [sloopId], references: [sloopId], onDelete: Cascade)
  likeCount Int
  createdAt DateTime    @default(now())

  @@index([sloopId])
  @@index([likeCount])
}

model SloopLikeRank {
  id        String      @id @default(cuid())
  sloopId   String
  sloop     RankedSloop @relation(fields: [sloopId], references: [sloopId], onDelete: Cascade)
  likeRank  Float
  createdAt DateTime    @default(now())

  @@index([sloopId])
  @@index([likeRank])
}

model RankedSloop {
  sloopId        String           @id
  sloop          Sloop            @relation(fields: [sloopId], references: [id], onDelete: Cascade)
  plays          Int              @default(0)
  likes          Int              @default(0)
  rank           Float            @default(0)
  likeRank       Float            @default(0)
  pastRanks      SloopRank[]
  pastPlayCounts SloopPlayCount[]
  pastLikeRanks  SloopLikeRank[]
  pastLikeCounts SloopLikeCount[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([sloopId])
  @@index([rank])
  @@index([likeRank])
}

model ArtistPlayCount {
  id        String       @id @default(cuid())
  artistId  String
  artist    RankedArtist @relation(fields: [artistId], references: [artistId], onDelete: Cascade)
  playCount Int
  createdAt DateTime     @default(now())

  @@index([artistId])
  @@index([playCount])
}

model ArtistRank {
  id        String       @id @default(cuid())
  artistId  String
  artist    RankedArtist @relation(fields: [artistId], references: [artistId], onDelete: Cascade)
  rank      Float
  createdAt DateTime     @default(now())

  @@index([artistId])
  @@index([rank])
}

model ArtistLikeCount {
  id        String       @id @default(cuid())
  artistId  String
  artist    RankedArtist @relation(fields: [artistId], references: [artistId], onDelete: Cascade)
  likeCount Int
  createdAt DateTime     @default(now())

  @@index([artistId])
  @@index([likeCount])
}

model ArtistLikeRank {
  id        String       @id @default(cuid())
  artistId  String
  artist    RankedArtist @relation(fields: [artistId], references: [artistId], onDelete: Cascade)
  likeRank  Float
  createdAt DateTime     @default(now())

  @@index([artistId])
  @@index([likeRank])
}

model RankedArtist {
  artistId       String            @id
  artist         Artist            @relation(fields: [artistId], references: [id], onDelete: Cascade)
  plays          Int               @default(0)
  likes          Int               @default(0)
  rank           Float             @default(0)
  likeRank       Float             @default(0)
  pastRanks      ArtistRank[]
  pastPlayCounts ArtistPlayCount[]
  pastLikeRanks  ArtistLikeRank[]
  pastLikeCounts ArtistLikeCount[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([artistId])
  @@index([rank])
}

model Follow {
  id         String      @id @default(cuid())
  followedId String
  followerId String
  followed   User     @relation("followers", fields: [followedId], references: [id], onDelete: Cascade)
  follower   User     @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([followedId, followerId])
  @@index([followedId])
  @@index([followerId])
}

model LinkedAccount {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  refresh_token     String  @db.Text
  access_token      String  @db.Text
  expires_at        Int
  token_type        String
  isPremium         Boolean
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@unique([userId, provider])
  @@index([userId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String          @id @default(cuid())
  name           String?         @db.Text
  bio            String?         @db.Text
  username       String          @unique @db.VarChar(255)
  email          String          @unique @db.VarChar(320)
  verified       Boolean         @default(false)
  emailVerified  DateTime?
  password       String?
  image          String?         @db.Text
  accounts       Account[]
  sessions       Session[]
  linkedAccounts LinkedAccount[]
  sloops         Sloop[]
  followersCount Int             @default(0)
  followingCount Int             @default(0)
  followers      Follow[]        @relation("followers")
  following      Follow[]        @relation("following")
  likes          Like[]
  plays          Play[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([id, username])
  @@unique([id, email])
  @@unique([username, email])
  @@index([email])
  @@index([username])
  @@fulltext([username], map: "username-fulltext")
  @@fulltext([name])
  @@fulltext([bio])
  @@fulltext([username, name, bio])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
