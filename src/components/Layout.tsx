import { Inter, Syne } from "next/font/google";
import Navbar from "./Navbar";
import Head from "next/head";
import { useSession } from "next-auth/react";
import Loading from "./utils/Loading";
import { useRouter } from "next/router";
import Script from "next/script";
import EditorProvider from "~/contexts/Editor";
import { useEffect, useState } from "react";
import { api } from "~/utils/api";
import { type UpdateSloopInput } from "~/utils/types";
import toast from "react-hot-toast";
import Link from "next/link";
import PlayerProvider from "~/contexts/Player";

const inter = Inter({ subsets: ["latin"], variable: "--font-inter" });
const syne = Syne({
  subsets: ["latin"],
  variable: "--font-syne",
});

const Layout = ({ children }: { children: React.ReactNode }) => {
  const { status: sessionStatus } = useSession();
  const [unsavedData, setUnsavedData] = useState(true);
  const { mutateAsync: saveSloop } = api.sloops.update.useMutation();
  const router = useRouter();

  useEffect(() => {
    const handleUnsaved = async (data: UpdateSloopInput) => {
      try {
        await saveSloop(data);
        localStorage.removeItem("sloop");
        setUnsavedData(false);
      } catch (error) {
        toast.error(
          (t) => (
            <div>
              {`You Have An Unsaved Sloop. `}
              <Link
                href={`/editor/${data.id}?unsaved=true`}
                onClick={() => toast.dismiss(t.id)}
                className="underline"
              >
                Click Here To Save
              </Link>
              {` Or Your Data Will Be Lost! `}
              <button
                className="underline"
                onClick={() => {
                  localStorage.removeItem("sloop");
                  toast.dismiss(t.id);
                }}
              >
                Click Here To Ignore.
              </button>
            </div>
          ),
          { duration: Infinity }
        );
        setUnsavedData(false);
      }
    };

    const sloop = localStorage.getItem("sloop");
    if (sloop) {
      void handleUnsaved(JSON.parse(sloop) as UpdateSloopInput);
    } else {
      setUnsavedData(false);
    }
  }, [saveSloop]);

  return (
    <>
      <Head>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        className={`${syne.variable} ${inter.variable} flex min-h-screen flex-col font-sans text-secondary`}
      >
        {router.pathname.includes("editor") ? (
          <main className="flex flex-1 flex-col">
            <EditorProvider>
              {sessionStatus === "loading" || unsavedData ? (
                <Loading />
              ) : (
                children
              )}
            </EditorProvider>
          </main>
        ) : router.pathname.includes("player") ? (
          <main className="flex flex-1 flex-col">
            <PlayerProvider>
              {sessionStatus === "loading" || unsavedData ? (
                <Loading />
              ) : (
                children
              )}
            </PlayerProvider>
          </main>
        ) : (
          <>
            <Navbar />
            <main className="mt-16 flex flex-1 flex-col">
              {sessionStatus === "loading" || unsavedData ? (
                <Loading />
              ) : (
                children
              )}
            </main>
          </>
        )}
      </div>
      <Script async src="https://sdk.scdn.co/spotify-player.js" />
    </>
  );
};

export default Layout;
